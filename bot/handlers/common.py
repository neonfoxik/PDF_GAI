from bot import bot, logger
from django.conf import settings
from telebot.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
)

from bot.keyboards import MENU_PARS_BUTTON
from bot.models import User, UserTemplateVariable, Documents, Content, Button
from bot.texts import FAQ


def start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    try:
        user_id = message.from_user.id

        user, created = User.objects.get_or_create(
            telegram_id=user_id,
            defaults={'name': message.from_user.first_name}
        )

        if user.has_plan:
            main_menu_message(message)
        else:
            buy_plan(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {e}")
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã {e}")



def buy_plan(message):
    user_id = message.chat.id

    bot.send_message(user_id, text="–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–∏–Ω—É—Ç—å X —Ä—É–±–ª–µ–π –ø–æ –º–æ–µ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
                                   "–ö–æ–≥–¥–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –≤ —á–∞—Ç")
    bot.register_next_step_handler(message, confirmation_to_send_admin)


def confirmation_to_send_admin(message: Message) -> None:
    user_id = message.from_user.id
    keyboard = InlineKeyboardMarkup(row_width=2)
    yes_btn = InlineKeyboardButton(text="–î–∞", callback_data=f"setbuy_y_{message.id}")
    no_btn = InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"setbuy_n_{message.id}")
    keyboard.add(yes_btn, no_btn)
    bot.send_message(
        chat_id=user_id,
        reply_markup=keyboard,
        text="–í—ã —É–≤–µ—Ä–µ–Ω–Ω—ã —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á–µ–∫ –∏ –º—ã –º–æ–∂–µ–º –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å",
    )


def share_with_admin(msg_id: str, user_id: str):
    bot.forward_message(settings.OWNER_ID, user_id, msg_id)

    kb = InlineKeyboardMarkup()
    btn_accept = InlineKeyboardButton(text='–û–¥–æ–±—Ä–∏—Ç—å ‚úÖ', callback_data=f'accept_{user_id}')
    btn_reject = InlineKeyboardButton(text='–û—Ç–∫–∞–∑–∞—Ç—å ‚ùå', callback_data=f'reject_{user_id}')

    kb.add(btn_accept).add(btn_reject)

    bot.send_message(text=f'–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!', chat_id=settings.OWNER_ID, reply_markup=kb)


def is_sending_to_admin(call: CallbackQuery) -> None:
    _, bool_, msg_id = call.data.split("_")
    bot.delete_message(message_id=call.message.message_id, chat_id=call.from_user.id)
    if bool_ == "y":
        share_with_admin(user_id=call.from_user.id, msg_id=msg_id)


def accept(call: CallbackQuery):
    _, user_id = call.data.split("_")
    user = User.objects.get(telegram_id=user_id)
    user.has_plan = True
    user.save()
    bot.send_message(user_id, text="–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º")


def main_menu_message(message: Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—è"""
    buttons = Button.objects.filter(parent__isnull=True)
    if not buttons.exists():
        bot.send_message(message.chat.id, "–í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
        
    markup = InlineKeyboardMarkup(row_width=1)
    for button in buttons:
        markup.add(InlineKeyboardButton(text=button.text, callback_data=f"bim_{button.button_id}"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)


def main_menu_call(callback_query: CallbackQuery) -> None:
    buttons = Button.objects.filter(parent__isnull=True)
    markup = InlineKeyboardMarkup(row_width=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    for button in buttons:
        markup.add(InlineKeyboardButton(text=button.text, callback_data=f"bim_{button.button_id}"))
    
    welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
    bot.edit_message_text(chat_id=callback_query.from_user.id, 
                         text=welcome_text,
                         reply_markup=markup, 
                         message_id=callback_query.message.message_id)


def next_button_menu(callback_query: CallbackQuery) -> None:
    try:
        button_id = int(callback_query.data.split("_")[-1])
        button = Button.objects.filter(button_id=button_id).first()
        if not button:
            bot.send_message(callback_query.message.chat.id, "–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        child_content = button.child
        if not child_content:
            bot.send_message(callback_query.message.chat.id, "–î–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
        bot.delete_message(message_id=callback_query.message.message_id, chat_id=callback_query.from_user.id)

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
        text_parts = [child_content.content_text[i:i+4096] for i in range(0, len(child_content.content_text), 4096)]

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        child_content_buttons = Button.objects.filter(parent=child_content)

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = InlineKeyboardMarkup(row_width=1)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        for child_button in child_content_buttons:
            markup.add(InlineKeyboardButton(text=child_button.text, callback_data=f"bim_{child_button.button_id}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å
        if button.parent:
            markup.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_btn_{button.button_id}"))

        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        markup.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu_call"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞. –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏.
        for i, part in enumerate(text_parts):
            if i == len(text_parts) - 1:
                bot.send_message(chat_id=callback_query.from_user.id, text=part, reply_markup=markup)
            else:
                bot.send_message(chat_id=callback_query.from_user.id, text=part)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ next_button_menu: {e}")
        bot.send_message(callback_query.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")


def old_button_menu(callback_query: CallbackQuery) -> None:
    try:
        button_id = int(callback_query.data.split("_")[-1])
        current_button = Button.objects.get(button_id=button_id)
        
        # –ï—Å–ª–∏ —É —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not current_button.parent:
            main_menu_call(callback_query)
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
        bot.delete_message(message_id=callback_query.message.message_id, chat_id=callback_query.from_user.id)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        parent_content = current_button.parent
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        buttons = Button.objects.filter(parent=parent_content)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
        markup = InlineKeyboardMarkup(row_width=1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        for btn in buttons:
            markup.add(InlineKeyboardButton(text=btn.text, callback_data=f"bim_{btn.button_id}"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ —É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –µ—Å—Ç—å —Å–≤–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å
        parent_button = Button.objects.filter(child=parent_content).first()
        if parent_button:
            markup.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_btn_{parent_button.button_id}"))
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            markup.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_call"))
        
        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        markup.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu_call"))
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
        text_parts = [parent_content.content_text[i:i+4096] for i in range(0, len(parent_content.content_text), 4096)]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞. –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏.
        for i, part in enumerate(text_parts):
            if i == len(text_parts) - 1:
                bot.send_message(chat_id=callback_query.from_user.id, text=part, reply_markup=markup)
            else:
                bot.send_message(chat_id=callback_query.from_user.id, text=part)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ old_button_menu: {e}")
        bot.send_message(callback_query.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")


def help_(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    bot.send_message(chat_id=message.chat.id, text=FAQ, parse_mode='Markdown')


def documents_main_menu(message: Message) -> None:
    documents = Documents.objects.all()
    markup = InlineKeyboardMarkup(row_width=2)
    for document in documents:
        button = InlineKeyboardButton(document.name, callback_data=f"doc_sender_{document.name}")
        markup.add(button)
    bot.send_message(message.chat.id, "–î–æ–∫—É–º–µ–Ω—Ç—ã", reply_markup=markup)

def documents_menu_call(call: CallbackQuery) -> None:
    documents = Documents.objects.all()
    markup = InlineKeyboardMarkup(row_width=2)
    for document in documents:
        button = InlineKeyboardButton(document.name, callback_data=f"doc_sender_{document.name}")
        markup.add(button)
    bot.edit_message_text(chat_id=call.message.chat.id, text="–î–æ–∫—É–º–µ–Ω—Ç—ã", reply_markup=markup
                          , message_id=call.message.message_id)



def documents_sender(callback_query: CallbackQuery) -> None:
    doc_name = callback_query.data.split('_')[2]
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="documents_menu_call"))
    keyboard.add(InlineKeyboardButton(text="–ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data=f"markup_choose_document_{doc_name}"))
    keyboard.add(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                                      callback_data="ChangeDefaultUserValue111"))
    try:
        bot.edit_message_text(chat_id=callback_query.message.chat.id,
                         text="–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —Ç–∞–∫ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–¥ –Ω–∏–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ",
                         reply_markup=keyboard, message_id=callback_query.message.message_id)
    except Documents.DoesNotExist:
        bot.send_message(callback_query.message.chat.id, "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        bot.send_message(callback_query.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")


def choose_default_user_values(callback_query: CallbackQuery) -> None:
    user_id = callback_query.from_user.id
    user = User.objects.get(telegram_id=user_id)
    user_variables = UserTemplateVariable.objects.filter(user=user)
    markup = InlineKeyboardMarkup(row_width=2)

    for variable in user_variables:
        button = InlineKeyboardButton(variable.display_name,
                                      callback_data=f"ChangeDefaultUserValue__{variable.template_field}")
        markup.add(button)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–µ—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=markup)


def change_default_user_value(callback_query: CallbackQuery) -> None:
    data_parts = callback_query.data.split("__")
    print(data_parts)
    if len(data_parts) < 2:
        bot.send_message(callback_query.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return
    template_field = data_parts[1]
    user = User.objects.get(telegram_id=callback_query.from_user.id)
    user_variables = UserTemplateVariable.objects.filter(user=user, template_field=template_field).first()
    
    if user_variables is None:
        bot.send_message(callback_query.message.chat.id, "–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    bot.send_message(user.telegram_id, f"–í—ã–±–µ—Ä–µ—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {user_variables.display_name}")
    bot.register_next_step_handler(callback_query.message, change_default_user_value_step, template_field)


def change_default_user_value_step(message: Message, template_field) -> None:
    user = User.objects.get(telegram_id=message.from_user.id)
    user_variables = UserTemplateVariable.objects.filter(user=user, template_field=template_field).first()
    
    if user_variables is None:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user_variables.value = message.text
    user_variables.save()
    bot.send_message(user.telegram_id, "–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ")
